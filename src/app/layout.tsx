"use client";
// import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

import { FormProvider } from "../components/context/FormContext";
import { EditProvider } from "../components/context/EditFormContext";
// import { GoogleOAuthProvider } from "@react-oauth/google";
// import { AuthProvider } from "@/context/AuthContext";
// import AuthGate from "@/components/custom/authGate";
// import {
//   BrowserRouter,
//   Navigate,
//   Route,
//   Router,
//   Routes,
// } from "react-router-dom";
// import PublicRoute from "@/components/PublicRoute";
// import Dashboard from "./dashboard/page";
// import ProtectedRoute from "@/components/ProtectedRoute";
// import SignIn from "./sign-in/page";
// import SignInAsEmployee from "./sign-in/as-employee/page";
// import CheckEmail from "./sign-in/check-email/page";
// import ForgotPassword from "./sign-in/forgot-password/page";
// import LinkExpired from "./sign-in/link-expired/page";
// import SetNewPassword from "./sign-in/set-new-password/page";
// import SuccessSetPassword from "./sign-in/success-set-password/page";
// import SignUp from "./sign-up/page";
// import SignupCompleteForm from "@/components/custom/signupCompletion";
// import SignUpCompleteRegistration from "./sign-up/complete-registration/page";
// import Employee from "./employee/page";
// import OvertimeManagement from "./overtime/page";
// import CheckclockOverviewPage from "./checkclock/checkclock-management/page";
// import NotFound from "@/components/custom/NotFound";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {/* <AuthProvider> */}
        {/* <AuthGate> */}
        <FormProvider>
          <EditProvider>
            {children}
          </EditProvider>
        </FormProvider>
        {/* </AuthGate> */}
        {/* </AuthProvider> */}

        {/* <AuthProvider>
          <FormProvider>
            <BrowserRouter>
              <Routes>
                <Route element={<PublicRoute />}>
                  <Route path="/" element={<SignIn />}></Route>
                  <Route path="/sign-in" element={<SignIn />}></Route>
                  <Route
                    path="/sign-in/as-employee"
                    element={<SignInAsEmployee />}
                  ></Route>
                  <Route
                    path="/sign-in/check-email"
                    element={<CheckEmail />}
                  ></Route>
                  <Route
                    path="/sign-in/forgot-password"
                    element={<ForgotPassword />}
                  ></Route>
                  <Route
                    path="/sign-in/link-expired"
                    element={<LinkExpired />}
                  ></Route>
                  <Route
                    path="/sign-in/set-new-password"
                    element={<SetNewPassword />}
                  ></Route>
                  <Route
                    path="/sign-in/success-set-password"
                    element={<SuccessSetPassword />}
                  ></Route>
                  <Route path="/sign-up" element={<SignUp />}></Route>
                  <Route
                    path="/sign-up/complete-registration"
                    element={<SignUpCompleteRegistration />}
                  ></Route>
                </Route>

                <Route element={<ProtectedRoute />}>
                  <Route path="/dashboard" element={<Dashboard />} />
                  <Route path="/employee" element={<Employee />} />
                  <Route path="/overtime" element={<OvertimeManagement />} />
                  <Route
                    path="/checkclock/checkclock-management"
                    element={<CheckclockOverviewPage />}
                  />
                  <Route path="/dashboard" element={<Dashboard />} />
                  <Route path="/dashboard" element={<Dashboard />} />
                </Route>

                <Route
                  path="/"
                  element={<Navigate to="/dashboard" replace />}
                />

                <Route path="*" element={<NotFound />} />
              </Routes>
            </BrowserRouter>
          </FormProvider>
        </AuthProvider> */}
      </body>
    </html>
  );
}
